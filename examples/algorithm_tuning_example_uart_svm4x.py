#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2023 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.32.0
# Product:       svm4x
# Model-Version: 2.0.0
#

import time
import argparse
from sensirion_shdlc_driver import ShdlcSerialPort
from sensirion_driver_adapters.shdlc_adapter.shdlc_channel import ShdlcChannel
from sensirion_uart_svm4x.device import Svm4xDevice

parser = argparse.ArgumentParser()
parser.add_argument('--serial-port', '-p', default='COM1')
args = parser.parse_args()

with ShdlcSerialPort(port=args.serial_port, baudrate=115200) as port:
    channel = ShdlcChannel(port)
    sensor = Svm4xDevice(channel)
    sensor.device_reset()
    time.sleep(2.0)
    (voc_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_voc_tuning_parameters()
    print(f"voc_index_offset: {voc_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )
    (nox_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_nox_tuning_parameters()
    print(f"nox_index_offset: {nox_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )
    sensor.set_voc_tuning_parameters(100, 12, 12, 180, 50, 230)
    sensor.set_nox_tuning_parameters(1, 12, 12, 720, 50, 230)
    sensor.start_measurement()
    for i in range(50):
        try:
            time.sleep(1.0)
            (a_humidity, a_temperature, a_voc_index, a_nox_index
             ) = sensor.read_measured_values()
            print(f"a_humidity: {a_humidity}; "
                  f"a_temperature: {a_temperature}; "
                  f"a_voc_index: {a_voc_index}; "
                  f"a_nox_index: {a_nox_index}; "
                  )
        except BaseException:
            continue
    sensor.stop_measurement()
