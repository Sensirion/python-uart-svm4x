#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2022 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:    sensirion-driver-generator 0.13.1
# Product:      svm41
# Version:      1.0
#

import pytest
import time
from sensirion_shdlc_driver import ShdlcSerialPort

from sensirion_driver_adapters.shdlc_adapter.shdlc_channel import ShdlcChannel
from sensirion_shdlc_svm41.device import Svm41Device


@pytest.fixture
def sensor(shdlc_port):
    # Create Channel
    channel = ShdlcChannel(shdlc_port)
    dev = Svm41Device(channel)
    time.sleep(0.1)  # some time is required to power up the device
    yield dev


@pytest.mark.needs_device
def test_get_serial_number1(sensor):
    serial_number = sensor.get_serial_number()
    print(f"serial_number: {serial_number}; "
          )


@pytest.mark.needs_device
def test_get_product_type1(sensor):
    product_type = sensor.get_product_type()
    print(f"product_type: {product_type}; "
          )


@pytest.mark.needs_device
def test_get_product_name1(sensor):
    product_name = sensor.get_product_name()
    print(f"product_name: {product_name}; "
          )


@pytest.mark.needs_device
def test_get_version1(sensor):
    (firmware_major, firmware_minor, firmware_debug, hardware_major, hardware_minor, protocol_major, protocol_minor
     ) = sensor.get_version()
    print(f"firmware_major: {firmware_major}; "
          f"firmware_minor: {firmware_minor}; "
          f"firmware_debug: {firmware_debug}; "
          f"hardware_major: {hardware_major}; "
          f"hardware_minor: {hardware_minor}; "
          f"protocol_major: {protocol_major}; "
          f"protocol_minor: {protocol_minor}; "
          )


@pytest.mark.needs_device
def test_device_reset1(sensor):
    sensor.device_reset()


@pytest.mark.needs_device
def test_get_system_up_time1(sensor):
    system_up_time = sensor.get_system_up_time()
    print(f"system_up_time: {system_up_time}; "
          )


@pytest.mark.needs_device
def test_get_temperature_offset_for_rht_measurements1(sensor):
    t_offset = sensor.get_temperature_offset_for_rht_measurements()
    print(f"t_offset: {t_offset}; "
          )


@pytest.mark.needs_device
def test_get_voc_tuning_parameters1(sensor):
    (voc_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_voc_tuning_parameters()
    print(f"voc_index_offset: {voc_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )


@pytest.mark.needs_device
def test_get_nox_tuning_parameters1(sensor):
    (nox_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_nox_tuning_parameters()
    print(f"nox_index_offset: {nox_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )


@pytest.mark.needs_device
def test_store_nv_data1(sensor):
    sensor.store_nv_data()


@pytest.mark.needs_device
def test_set_temperature_offset_for_rht_measurements1(sensor):
    sensor.set_temperature_offset_for_rht_measurements(0)


@pytest.mark.needs_device
def test_set_voc_tuning_parameters1(sensor):
    sensor.set_voc_tuning_parameters(100, 12, 12, 180, 50, 230)


@pytest.mark.needs_device
def test_set_nox_tuning_parameters1(sensor):
    sensor.set_nox_tuning_parameters(1, 12, 12, 720, 50, 230)


@pytest.mark.needs_device
def test_set_voc_state1(sensor):
    sensor.set_voc_state((0, 0, 0, 0, 0, 0, 0, 0))


@pytest.mark.needs_device
def test_start_measurement1(sensor):
    sensor.start_measurement()
    (a_humidity, a_temperature, a_voc_index, a_nox_index
     ) = sensor.read_measured_values()
    print(f"a_humidity: {a_humidity}; "
          f"a_temperature: {a_temperature}; "
          f"a_voc_index: {a_voc_index}; "
          f"a_nox_index: {a_nox_index}; "
          )
    (humidity, temperature, voc_index, nox_index
     ) = sensor.read_measured_values_as_integers()
    print(f"humidity: {humidity}; "
          f"temperature: {temperature}; "
          f"voc_index: {voc_index}; "
          f"nox_index: {nox_index}; "
          )
    (raw_humidity, raw_temperature, raw_voc_ticks, raw_nox_ticks
     ) = sensor.read_measured_raw_values()
    print(f"raw_humidity: {raw_humidity}; "
          f"raw_temperature: {raw_temperature}; "
          f"raw_voc_ticks: {raw_voc_ticks}; "
          f"raw_nox_ticks: {raw_nox_ticks}; "
          )
    t_offset = sensor.get_temperature_offset_for_rht_measurements()
    print(f"t_offset: {t_offset}; "
          )
    (voc_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_voc_tuning_parameters()
    print(f"voc_index_offset: {voc_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )
    (nox_index_offset, learning_time_offset_hours, learning_time_gain_hours, gating_max_duration_minutes, std_initial,
     gain_factor
     ) = sensor.get_nox_tuning_parameters()
    print(f"nox_index_offset: {nox_index_offset}; "
          f"learning_time_offset_hours: {learning_time_offset_hours}; "
          f"learning_time_gain_hours: {learning_time_gain_hours}; "
          f"gating_max_duration_minutes: {gating_max_duration_minutes}; "
          f"std_initial: {std_initial}; "
          f"gain_factor: {gain_factor}; "
          )
    state = sensor.get_voc_state()
    print(f"state: {state}; "
          )
    (firmware_major, firmware_minor, firmware_debug, hardware_major, hardware_minor, protocol_major, protocol_minor
     ) = sensor.get_version()
    print(f"firmware_major: {firmware_major}; "
          f"firmware_minor: {firmware_minor}; "
          f"firmware_debug: {firmware_debug}; "
          f"hardware_major: {hardware_major}; "
          f"hardware_minor: {hardware_minor}; "
          f"protocol_major: {protocol_major}; "
          f"protocol_minor: {protocol_minor}; "
          )
    sensor.stop_measurement()

